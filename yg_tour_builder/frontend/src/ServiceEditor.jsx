// üì¶ ServiceEditor.jsx ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥
import { useServices } from "./hooks/useServices";
import ServiceCard from "./ServiceCard";

export default function ServiceEditor() {
  const { services, setServices, loading } = useServices();

  const handleAdd = () => {
    setServices((prev) => [
      ...prev,
      {
        key: `#–Ω–æ–≤–∞—è`,
        label: "–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞",
        description: "",
        price: 0,
        calc: "fixed",
        category: "",
        season: "",
        comment: "",
        composite: false,
        components: [],
      },
    ]);
  };

  const updateService = (index, updatedService) => {
    const updated = [...services];
    updated[index] = updatedService;
    setServices(updated);
  };

  const removeService = (index) => {
    const updated = [...services];
    updated.splice(index, 1);
    setServices(updated);
  };

  const handleSaveToServer = async () => {
    try {
      const res = await fetch(`${import.meta.env.VITE_API_URL}/services.yaml`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(services),
      });
      if (!res.ok) throw new Error(await res.text());
      alert("‚úÖ –£—Å–ª—É–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
      alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    }
  };

  if (loading) return <div className="p-4 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</div>;

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">–†–µ–¥–∞–∫—Ç–æ—Ä —É—Å–ª—É–≥</h2>

      <div className="flex gap-4">
        <button onClick={handleAdd} className="px-4 py-2 bg-green-600 text-white rounded">‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</button>
        <button onClick={handleSaveToServer} className="px-4 py-2 bg-blue-600 text-white rounded">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä</button>
      </div>

      {services.map((s, i) => (
        <ServiceCard
          key={i}
          data={s}
          onChange={(updated) => updateService(i, updated)}
          onDelete={() => removeService(i)}
        />
      ))}
    </div>
  );
}
