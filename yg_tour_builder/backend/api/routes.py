from __future__ import annotations
import yaml
from fastapi import APIRouter,  UploadFile, File, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.responses import FileResponse
from pathlib import Path

from ..engine import parser, calculator, generator

router = APIRouter()

from fastapi import Request
from fastapi.responses import JSONResponse

TEMPLATES_PATH = Path(__file__).parent.parent / "data" / "templates.yaml"

@router.post("/generate/markdown")
async def generate_markdown(request: Request):
    # üîπ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        data = await request.json()  # –û–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"1": {"description": "...", "services": [...]}, ...}
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": f"Invalid JSON: {str(e)}"})

    result = []  # üî∏ –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±–µ—Ä—ë—Ç—Å—è Markdown

    # üîπ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º —Ç—É—Ä–∞
    for day, content in data.items():
        result.append(f"## –î–µ–Ω—å {day}")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è

        # üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        desc = content.get("description")
        if isinstance(desc, str) and desc.strip():
            result.append(desc.strip())

        # üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        services = content.get("services", [])
        if not isinstance(services, list):
            services = []

        for item in services:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –¥–µ–ª–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
            readable = item.replace("#", "").replace("_", " ").capitalize()
            result.append(f"- {readable}")

        result.append("")  # üîπ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –¥–Ω—è–º–∏

    # üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π markdown-—Ç–µ–∫—Å—Ç
    return {"markdown": "\n".join(result)}

def load_templates():
    with TEMPLATES_PATH.open("r", encoding="utf-8") as f:
        data = yaml.safe_load(f)
    return data.get("templates", {})

templates = load_templates()

@router.get("/template")
async def get_template(region: str = "baikal"):
    if region not in templates:
        raise HTTPException(status_code=404, detail="Template not found")
    return {"days": templates[region]}

@router.post("/itinerary/upload")
async def upload_itinerary(file: UploadFile = File(...)):
    if not file.filename.lower().endswith(".docx"):
        raise HTTPException(status_code=400, detail="Only .docx files are supported")
    contents = await file.read()
    tmp_path = "/tmp/uploaded.docx"
    with open(tmp_path, "wb") as f:
        f.write(contents)
    days = parser.parse_word(tmp_path)
    return {"days": days}

@router.post("/estimate")
async def generate_estimate(
    request: Request,
    numPeople: int = 10,
    season: str = "winter"
):
    days = await request.json()
    estimate = calculator.calculate_costs(days, num_people=numPeople, season=season)
    return estimate

@router.post("/download/word")
async def download_word(request: Request):
    days = await request.json()
    content = generator.create_word(days)
    return StreamingResponse(iter([content]), media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document", headers={"Content-Disposition": "attachment; filename=itinerary.docx"})

@router.post("/download/excel")
async def download_excel(request: Request):
    try:
        days = await request.json()
        print("üì¶ Days received:", days)

        estimate = calculator.calculate_costs(days)
        print("üìä Estimate:", estimate)

        content = generator.create_excel(estimate["detail"])
        return StreamingResponse(
            iter([content]),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=estimate.xlsx"}
        )
    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel:", e)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/services.yaml")
async def get_services_yaml():
    path = Path(__file__).parent.parent / "data" / "services.yaml"
    return FileResponse(path, media_type="application/x-yaml")