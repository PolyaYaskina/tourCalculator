from __future__ import annotations
import yaml
from fastapi import APIRouter,  UploadFile, File, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.responses import FileResponse
from pathlib import Path

from ..engine import parser, calculator, generator

router = APIRouter()

from fastapi import Request
from fastapi.responses import JSONResponse


TEMPLATES_DIR = Path(__file__).parent.parent / "data" / "templates"
DIRECTIONS_PATH = Path(__file__).parent.parent / "data" / "directions.yaml"
@router.get("/directions")
async def get_directions():
    try:
        with DIRECTIONS_PATH.open("r", encoding="utf-8") as f:
            data = yaml.safe_load(f)
        return data.get("directions", {})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ directions.yaml: {e}")

@router.get("/template/file")
async def get_template_file(file: str):
    base_dir = Path(__file__).parent.parent / "data" / "templates"
    full_path = (base_dir / file).resolve()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–µ –¥–∞—ë–º –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–∞–ø–∫–∏ templates
    if not str(full_path).startswith(str(base_dir.resolve())):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å")

    if not full_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        with full_path.open("r", encoding="utf-8") as f:
            data = yaml.safe_load(f)
        return {"days": data}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")

@router.post("/generate/markdown")
async def generate_markdown(request: Request):
    # üîπ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        data = await request.json()  # –û–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"1": {"description": "...", "services": [...]}, ...}
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": f"Invalid JSON: {str(e)}"})

    result = []  # üî∏ –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±–µ—Ä—ë—Ç—Å—è Markdown

    # üîπ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º —Ç—É—Ä–∞
    for day, content in data.items():
        result.append(f"## –î–µ–Ω—å {day}")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è

        # üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        desc = content.get("description")
        if isinstance(desc, str) and desc.strip():
            result.append(desc.strip())

        # üî∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        services = content.get("services", [])
        if not isinstance(services, list):
            services = []

        for item in services:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –¥–µ–ª–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
            readable = item.replace("#", "").replace("_", " ").capitalize()
            result.append(f"- {readable}")

        result.append("")  # üîπ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –¥–Ω—è–º–∏

    # üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π markdown-—Ç–µ–∫—Å—Ç
    return {"markdown": "\n".join(result)}


@router.post("/itinerary/upload")
async def upload_itinerary(file: UploadFile = File(...)):
    if not file.filename.lower().endswith(".docx"):
        raise HTTPException(status_code=400, detail="Only .docx files are supported")
    contents = await file.read()
    tmp_path = "/tmp/uploaded.docx"
    with open(tmp_path, "wb") as f:
        f.write(contents)
    days = parser.parse_word(tmp_path)
    return {"days": days}

@router.post("/estimate")
async def generate_estimate(
    request: Request,
    numPeople: int = 10,
    season: str = "winter"
):
    days = await request.json()
    estimate = calculator.calculate_costs(days, num_people=numPeople, season=season)
    return estimate

@router.post("/download/word")
async def download_word(request: Request):
    days = await request.json()
    content = generator.create_word(days)
    return StreamingResponse(iter([content]), media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document", headers={"Content-Disposition": "attachment; filename=itinerary.docx"})

@router.post("/download/excel")
async def download_excel(request: Request):
    try:
        days = await request.json()
        print("üì¶ Days received:", days)

        estimate = calculator.calculate_costs(days)
        print("üìä Estimate:", estimate)

        content = generator.create_excel(estimate["detail"])
        return StreamingResponse(
            iter([content]),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=estimate.xlsx"}
        )
    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel:", e)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/services.yaml")
async def get_services_yaml():
    path = Path(__file__).parent.parent / "data" / "services.yaml"
    return FileResponse(path, media_type="application/x-yaml")

@router.post("/services.yaml")
async def save_services_yaml(request: Request):
    try:
        payload = await request.json()

        # üíæ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path = Path(__file__).parent.parent / "data" / "services.yaml"

        # ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º YAML
        with path.open("w", encoding="utf-8") as f:
            yaml.dump(payload, f, allow_unicode=True)

        return {"status": "ok"}
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ services.yaml:", e)
        raise HTTPException(status_code=400, detail=str(e))


from ..engine.grouping import group_services_by_category

@router.get("/grouped")
def get_grouped_services():
    try:
        path = Path(__file__).parent.parent / "data" / "services.yaml"
        grouped = group_services_by_category(path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º
        if not isinstance(grouped, dict):
            raise ValueError("–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        if not any(isinstance(group["items"], list) and group["items"] for group in grouped.values()):
            raise ValueError("–í—Å–µ –≥—Ä—É–ø–ø—ã –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")

        return grouped

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤ get_grouped_services:", e)
        raise HTTPException(status_code=500, detail=str(e))